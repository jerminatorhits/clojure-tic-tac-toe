*ns*
exit
(and (= 1 1) + )
(and (= 1 1) 1)
(first [+ 0])
(+)
(and + (= 1 1))
((and + (= 1 1)) 1 2 3)
(doc +)
(defn annouce-treasure-location
[{lat :lat lng :lng}]
(println (str "Treasure lat: " lat))
(println (str "Treasure lng: " lng)))
(annouce-treasure-location {:lat 28.22 :lng 81.33})
(map (fn [name] (str "Hi, " name))
["Darth Vader" "Mr.Magoo"])
(map #(str "Hi, " %)["Darth Vader" "Mr. Magoo"])
(identity 1)
(let [x 1] x)
x
(println x)
(+ x 0)
(let [q 1] q)
(set [:a :a])
exit
"1 | 2 | 3\n4 | 5 | 6\n7 | 8 | 9"
println "1 | 2 | 3\n4 | 5 | 6\n7 | 8 | 9"
(println "1 | 2 | 3\n4 | 5 | 6\n7 | 8 | 9")
(println " 1 | 2 | 3 \n-----------\n 4 | 5 | 6 \n-----------\n 7 | 8 | 9 ")
(println " 1 | 2 | 3 \n---|---|---\n 4 | 5 | 6 \n-----------\n 7 | 8 | 9 ")
" 1 | 2 | 3 \n---|---|---\n 4 | 5 | 6 \n---|---|---\n 7 | 8 | 9 "
(println " 1 | 2 | 3 \n---|---|---\n 4 | 5 | 6 \n---|---|---\n 7 | 8 | 9 ")
exit
board = [1 2 3 4 5 6 7 8 9]
(println board)
(println [1 2 3 4 5 6 7 8 9][0])
(def board [1 2 3 4 5 6 7 8 9])
(println board[0])
(println board)
(println (nth board 0))
(println board)
exit
(println (read-line))
exit
(parse-int "10not123")
(defn parse-int [s]
   (Integer. (re-find  #"\d+" s )))
(defn parse-int [s]
(
)
(defn parse-int [s]
   (Integer. (re-find  #"\d+" s )))
(parse-int "10not123")
exit
(parse-number "p")
exit
(for [x (range 1 9)])
(for [x (range 1 9)] [x]))
(vec (range 1 9))
(vec (range 1 10))
exit
(number? 1)
lein run
exit
(defn parse-int [s]
   (Integer. (re-find  #"\d+" s )))
(parse-int "s")
exit
(validate-input 1)
(validate-input "1")
exit
(validates-input 0)
(validate-input 0)
(validate-input 1)
(validate-input -1)
(validate-input "a")
exit
(validate-input 0)
(is (validate-input 0) false)
(= (validate-input 0) false)
exit
(take-nth 3 (range 10))
(take-nth 3 [1 2 3 4 5 6 7 8 9])
(take-nth 3 [2 3 4 5 6 7 8 9])
(take-nth 3 (drop 2 [1 2 3 4 5 6 7 8 9]))
(take-nth 3 (drop 1 [1 2 3 4 5 6 7 8 9]))
exit
(take-nth 1 ["X" 2 3 4 "X" 6 7 8 "X"])
(nth 1 ["X" 2 3 4 "X" 6 7 8 "X"])
(nth ["X" 2 3 4 "X" 6 7 8 "X"] 1)
(nth ["X" 2 3 4 "X" 6 7 8 "X"] 0)
exit
(nth ["X" 2 3 4 "X" 6 7 8 "X"] 1)
(nth ["X" 2 3 4 "X" 6 7 8 "X"] 0)
(nth ["X" 2 3 4 "X" 6 7 8 "X"] 4)
(nth ["X" 2 3 4 "X" 6 7 8 "X"] 8)
(= (nth ["X" 2 3 4 "X" 6 7 8 "X"] 8) (nth ["X" 2 3 4 "X" 6 7 8 "X"] 0))
exit
board
(let [board ["X" 2 3 4 "X" 6 7 8 "X"]])
board
(= (nth ["X" 2 3 4 "X" 6 7 8 "X" 0) (= (nth ["X" 2 3 4 "X" 6 7 8 "X"] 4) (nth ["X" 2 3 4 "X" 6 7 8 "X"] 8)))
exit
(= false false)
exit
(winner? [1 2 3 4 5 6 7 8 9])
(defn horizontal-win
  [board]
  (if (or 
      (= (count (distinct (subvec board 0 3))) 1)
      (= (count (distinct (subvec board 3 6))) 1)
      (= (count (distinct (subvec board 6 9))) 1))
    true
  false))
(defn vertical-win
  [board]
  (if (or 
      (= (count (distinct (take-nth 3 board))) 1)
      (= (count (distinct (take-nth 3 (drop 1 board)))) 1)
      (= (count (distinct (take-nth 3 (drop 2 board)))) 1))
    true
  false))
(defn diagonal-win
  [board]
  (= (nth board 0) (nth board 4) (nth board 8)))
(defn antidiagonal-win
  [board]
  (= (nth board 2) (nth board 4) (nth board 6)))
(defn winner?
  [board]
  (and (horizontal-win board) (vertical-win board) (diagonal-win board) (antidiagonal-win board)))
(winner? [1 2 3 4 5 6 7 8 9])
(winner? ["X" "X" "X" 4 5 6 7 8 9])
exit
(contains? [1 2 3] 2)
(contains? [1 2 3] Number)
(contains? [1 2 3] integer)
(contains? [1 2 3] int)
(contains? [1 2 3] Number.class)
(contains? [1 2 3] class)
(number? [1 2 3])
exit
(def myVec [1,2,3])
(for [x myVec] (println x))
(def tieboard ["X" "O" "O" "O" "X" "X" "X" "O" "X"])
(winner? tieboard)
(defn horizontal-win
  [board]
  (if (or 
      (= (count (distinct (subvec board 0 3))) 1)
      (= (count (distinct (subvec board 3 6))) 1)
      (= (count (distinct (subvec board 6 9))) 1))
    true
  false))
(defn vertical-win
  [board]
  (if (or 
      (= (count (distinct (take-nth 3 board))) 1)
      (= (count (distinct (take-nth 3 (drop 1 board)))) 1)
      (= (count (distinct (take-nth 3 (drop 2 board)))) 1))
    true
  false))
(defn diagonal-win
  [board]
  (= (nth board 0) (nth board 4) (nth board 8)))
(defn antidiagonal-win
  [board]
  (= (nth board 2) (nth board 4) (nth board 6)))
(defn winner?
  [board]
  (or (horizontal-win board) (vertical-win board) (diagonal-win board) (antidiagonal-win board)))
(winner? tieboard)
(def tieboard ["X" "O" "O" "O" "X" "X" "X" "X" "O"])
(winner? tieboard)
(doseq [x [1 2 3 4 5]] (number? x))
(reduce = ["X" "X" "X" "X" "X"])
(reduce = [1 2 3 4 5])
(reduce + [1 2 3 4 5])
(reduce is [1 2 3 4 5])
(reduce is ["X" "X" "X"])
(reduce + ["X" "X" "X"])
(reduce = ["X" "X" "X"])
(reduce = ["X" "X"])
(reduce = ["X" "X" true])
(reduce number? ["X" "X" true])
(reduce number? [1 true])
(reduce number? [1])
(reduce number? [1 2])
(map number? tieboard)
(distinct (map number? tieboard))
(= (distinct (map number? tieboard)) false)
(= (set (map number? tieboard)) false)
(set (map number? tieboard))
(distinct (map number? tieboard))
(flatten (map number? tieboard))
(into (map number? tieboard)))
(into (map number? tieboard))))
(map number? tieboard))
(map number? tieboard)
(some number? tieboard)
(some number? [1 2 3 4 5 6 7 8 9])
!true
(def ex ["X" "O" "O" "O" "X" "X" "X" "X" "O"])
(defn tie?
  [board]
  (and (winner? board) (false? (some number? board))))
(tie? ex)
(some number? ex)
(some number? [1 2 "X"])
board
(def board ["X" "O" "O" "O" "X" "X" "X" "X" "O"])
(winner? board)
(true? (some number? board))
(some number? board)
exit
(let [current-board [] human "X" computer "O" current-player human])
(let [current-board [] human "X" computer "O" current-player human]
(= huamn current-player))
(= human current-player))
(let [current-board [] human "X" computer "O" current-player human]
(= human current-player))
(let [current-board [] human "X" computer "O" current-player human]
(= computer current-player))
(nth [1 2 3] 1)
(string? "X")
(string? (nth [1 2 3 4 5 6 7 8 9] 1))
(def human-player "X")
(def computer-player "O")
(defn switch-player
  [current-player]
  (if (= current-player human-player)
    computer-player)
  (if (= current-player computer-player)
    human-player)
)  
(switch-player human-player)
(switch-player computer-player)
human-player
current-player
(switch-player human-player)
(defn switch-player1
[current-player]
(println current-player)
(println (= current-player human-player))
)
(switch-player1 human-player)
(switch-player human-player)
computer-player
(def board [1 2 3 4 5 6 7 8 9])
(for [x [1 2 3 4 5 6 7 8 9]
(println x))
]
(for [x [1 2 3 4 5 6 7 8 9]
(println x)])
(for [x [0 1 2 3 4 5]
      :let [y (* x 3)]
      :when (even? y)]
  y)
(for [:let [x (println board)]
)
(defn best-move [board]
  (for [x board
    :let [y (* x 3)]
    :when (even? y)]
  y))
(best-move [1 2 3 4 5 6 7 8 9])
(defn best-move [board]
  (for [x board
    :let [y x]
    :when (int? y)]
  y))
(defn best-move [board]
  (for [x board
    :let [y x]
    :when (int? x)]
  x))
(int? 1)
exit
(int? 42)
(integer? 42)
(defn best-move [board]
  (for [x board
    :let [y x]
    :when (integer? y)]
  y))
(best-move [1 2 3 4 5 6 7 8 9])
(defn available-spaces [board]
  (for [x board
    :when (integer? x)]
  x))
(available-spaces [1 2 "X" 4 "O" 6 7 8 9])
(type (available-spaces [1 2 "X" 4 "O" 6 7 8 9]))
(map first (tree-seq next rest '(:A (:B (:D) (:E)) (:C (:F)))))
'(:A (:B (:D) (:E)) (:C (:F)))
(tree-seq seq? identity '((1 2 (3)) (4)))
(get (frequencies [1 2 3]) "X")
(< nil nil)
(doseq [i [0 1 2 3]] (type i))
(doseq [i [0 1 2 3]] (println (type i)))
(rest [1 2])
(rest [2])
(rest [])
(< 1 nil)
(max 1 nil)
(type '(1 2 3))
(type (1 2 3))
exit
#{
                            ["X" "X" "O" 
                             "O" "O"  6 
                              7   8  "X"]
                            ["X" "X" "O" 
                              5  "O" "O" 
                              7   8  "X"]
                            10
                            ["X" "X" "O" 
                              5  "O"  6 
                              7  "O" "X"]}
(type (
                            ["X" "X" "O" 
                             "O" "O"  6 
                              7   8  "X"]
                            ["X" "X" "O" 
                              5  "O" "O" 
                              7   8  "X"]
                            10
                            ["X" "X" "O" 
                              5  "O"  6 
                              7  "O" "X"]))
(type ([1 2] [3 5] 10))
(type '([1 2] [3 5] 10))
(max (19 9))
(max (10 0))
(max [10 0])
exit
(apply max {1 2 4 0 a d})
(apply max {1 2 4 0 [1 7]})
(apply max [1 2 4 0 7])
(apply max [7])
(apply max [])
(apply max [1])
(apply max {1})
(apply max [1])
(apply max [1 2 4 0 7])
(apply max [])
(defn validate-integer [entry]
  (and (number? entry) (>= entry 1) (<= entry 9)))
(validate-integer "")
(validate-integer " ")
(validate-integer "1")
(validate-integer 1)
exit
